# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pDMseMXRMIE1Tv1LbFjFPf0YvSfzREtE
"""

import numpy as np

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sys
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

calories = pd.read_csv('/content/calories.csv')

exercise_data =pd.read_csv('/content/exercise.csv')
exercise_data.head()

calories.head()

calories_data=pd.concat([exercise_data,calories['Calories']],axis=1)
calories_data.head()

calories_data.shape
  calories_data.info()

calories_data.isnull().sum()

calories_data.describe()

sys.set()

sys.countplot(calories_data['Gender'])

sys.distplot(calories_data['Age'])

sys.distplot(calories_data['Height'])

sys.distplot(calories_data['Weight'])

calories_data.replace({"Gender":{'male':0,'female':1}},inplace = True)
correlation = calories_data.corr()
plt.figure(figsize=(10,10))
sys.heatmap(correlation,cbar =True,square=True,fmt ='.1f',annot = True,annot_kws={'size':8},cmap='Blues')

X = calories_data.drop(columns =['User_ID','Calories'],axis =1)
Y = calories_data['Calories']
print(X)

calories_data.head()

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)
print(X.shape,X_train.shape,X_test.shape)

model = XGBRegressor()
model.fit(X_train,Y_train)

test_data_prediction = model.predict(X_test)

print(test_data_prediction)

mae = metrics.mean_absolute_error(Y_test,test_data_prediction)
print("Mean Absolute error=",mae)

train_data_prediction = model.predict(X_train)

input_data =(0,69,190.0,95.0,39.0,110.0,50.8)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

import pickle
filename = 'trained_model.sav'
pickle.dump(model,open(filename,'wb'))

loaded_m = pickle.load(open('trained_model.sav','rb'))

input_data =(0,69,190.0,95.0,39.0,110.0,50.8)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = loaded_m.predict(input_data_reshaped)
print(prediction)